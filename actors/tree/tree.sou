/********************************************************************************
		Tree Gfx data.
														[ Jan 25, 1996 ]
*********************************************************************************/

#define ShapeColor_tree(R,G,B) {{R*SCALE ,G*SCALE ,B*SCALE ,0 ,R*SCALE ,G*SCALE ,B*SCALE ,0 },{ R, G, B, 0, R, G, B, 0, LIGHT_X, LIGHT_Y, LIGHT_Z, 0} }

/********************************************************************************/
/*	Light data of MainTree.														*/
/********************************************************************************/
static Lights1 light_tree[] = {
	ShapeColor_tree(255,255,255),
};

/********************************************************************************/
/*	Texture data of MainTree.													*/
/********************************************************************************/
ALIGNED8 static const Texture main_tree1_txt[] = {
#include "actors/tree/main_tree1_txt.rgba16.inc.c"
};

ALIGNED8 static const Texture main_tree2_txt[] = {
#include "actors/tree/main_tree2_txt.rgba16.inc.c"
};

/********************************************************************************/
/*	Vertex data.																*/
/********************************************************************************/
static Vtx vtx_main_tree[] = {
	{   -356,      0,      0,     0,  -200,  2012,     0,    0,  127,  255}, 
	{      0,      0,      0,     0,   990,  2012,     0,    0,  127,  255}, 
	{      0,    820,      0,     0,   990,  -504,     0,    0,  127,  255}, 
	{      0,      0,      0,     0,     0,  2012,     0,    0,  127,  255}, 
	{    358,      0,      0,     0,  1160,  2012,     0,    0,  127,  255}, 
	{      0,    820,      0,     0,     0,  -504,     0,    0,  127,  255}, 
};

/********************************************************************************/
/*	Graphic display list.														*/
/********************************************************************************/
static Gfx gfx_tree_common_init[] = {
	gsDPPipeSync(),
	gsDPSetCombineMode(G_CC_MODULATERGBA, G_CC_MODULATERGBA),
	gsSPClearGeometryMode(G_SHADING_SMOOTH),
	gsDPSetTile(G_IM_FMT_RGBA,G_IM_SIZ_16b, 0, 0, 7, 0,  0,0,0, 0,0,0),
	gsSPTexture(0xffff,0xffff, 0, 0, G_ON),
	gs_Tani_SetUpTileDescrip(G_IM_FMT_RGBA,G_IM_SIZ_16b, 32, 64,  0, 0, G_TX_CLAMP|G_TX_NOMIRROR, 5, G_TX_NOLOD, G_TX_CLAMP|G_TX_NOMIRROR, 6, G_TX_NOLOD),
	gsSPLight((&light_tree[0].l[0]),1 ),
	gsSPLight((&light_tree[0].a   ),2 ),
	gsSPVertex(&vtx_main_tree[0], 6, 0),
	gsSPEndDisplayList() 
};

static Gfx gfx_tree_common_reset[] = {
	gsSPTexture(0xffff, 0xffff, 0, 0, G_OFF),
	gsDPPipeSync(),
	gsDPSetCombineMode(G_CC_SHADE, G_CC_SHADE),
	gsSPSetGeometryMode(G_SHADING_SMOOTH),
	gsSPEndDisplayList() 
};

Gfx RCP_main_tree[] = {
	gsSPDisplayList(gfx_tree_common_init),
	gs_Tani_LoadTextureImage2(main_tree1_txt, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 64, 0, 7),
	gsSP1Triangle( 0, 1, 2, 0),
	gs_Tani_LoadTextureImage2(main_tree2_txt, G_IM_FMT_RGBA, G_IM_SIZ_16b, 32, 64, 0, 7),
	gsSP1Triangle( 3, 4, 5, 0),
	gsSPDisplayList(gfx_tree_common_reset),
	gsSPEndDisplayList() 
};
